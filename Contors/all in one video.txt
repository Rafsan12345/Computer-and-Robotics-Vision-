import cv2
import winsound
import urllib.request as ur
import numpy as np
import cv2
from PIL import Image
import time
# Start the video capture
url = 'http://192.168.0.102:8080/video'
cap = cv2.VideoCapture(url)

while True:
    # Read a frame from the video capture
    ret, frame = cap.read()
    imgCopy = frame.copy()
    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur to the frame
    blur = cv2.GaussianBlur(gray, (5, 5), 1)

    # Apply Canny edge detection to the blurred frame
    edges = cv2.Canny(blur, 50, 50)

    # Find the contours in the frame
    contours, hierarchy = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
############################################################################
    for cnt in contours:
        # Check if the contour has a particular size
        area = cv2.contourArea(cnt)
        if area > 50:
            #print(area)
            perimeter = cv2.arcLength(cnt, True)
            print(perimeter)
            approx = cv2.approxPolyDP(cnt, 0.02 * perimeter, True)
            x, y, w, h = cv2.boundingRect(approx)
            corner = len(approx)
            print(corner)
            #cv2.drawContours(imgCopy, contours, -1, (0, 255, 0), 2)
            if corner == 4:
                print(corner)
                cv2.rectangle(imgCopy, (x, y), (x + w, y + h), (0, 0, 255), 2)


                cv2.drawContours(imgCopy, contours, -1, (0, 255, 0), 2)

############################################################################
    # Display the frame
    cv2.imshow('Frame',imgCopy)

    # Check if the user pressed 'q' to quit
    if cv2.waitKey(1) == ord('q'):
        break

# Release the video capture and destroy the windows
cap.release()
cv2.destroyAllWindows()
