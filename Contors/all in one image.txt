import cv2

# Load the image and convert it to grayscale
image = cv2.imread('image.jpg')
imgCopy = image.copy()
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
blurred_image = cv2.GaussianBlur(gray, (5,5), 1)
# Use Canny edge detection to find the edges in the image
edges = cv2.Canny(blurred_image, 100, 200)

# Find the contours in the image
contours, hierarchy = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

# Find the contour with the desired shape or size
for cnt in contours:
    # Check if the contour has a particular size
    area = cv2.contourArea(cnt)
    if area > 500:
        print(area)
        cv2.drawContours(image, [cnt], -1, (0,0,255), 3)
        perimeter = cv2.arcLength(cnt, True)
        print(perimeter)
        approx = cv2.approxPolyDP(cnt,0.02*perimeter,True)
        corner = len(approx)
        x, y, w, h = cv2.boundingRect(approx)
        if corner == 3: objectType = "Tri"
        elif corner == 4:
            aptratio = w/float(h)
            if aptratio > 0.95 and aptratio < 1.05: objectType = "Square"
            else: objectType = "Rectangle"
        elif corner > 4: objectType = "circle"
        else: objectType = "NONE"



        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)
        cv2.putText(imgCopy,objectType, (x+(w//2)-10, y+(h//2)-10), cv2.FONT_HERSHEY_COMPLEX,0.9,(0,0,0),2)






        print(corner)


#Show the image
#image
#imgCopy
cv2.imshow('Contours', imgCopy)
cv2.waitKey(0)
cv2.destroyAllWindows()
